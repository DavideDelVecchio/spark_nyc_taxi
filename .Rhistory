taxi_files <- list.files("data/", full.names = TRUE)
taxi_files
?rxHadoopCopyFromLocal
rxHadoopMakeDir("/user/RevoShare/alizaidi/taxidata/")
lapply(taxi_files, function(x) {
rxHadoopCopyFromClient(x, paste0("/user/RevoShare/alizaidi/taxidata/", x))
}
lapply(taxi_files, function(x) {
rxHadoopCopyFromLocal(x, paste0("/user/RevoShare/alizaidi/taxidata/", x))
})
taxi_files <- list.files("data/")
taxi_files
lapply(taxi_files, function(x) {
rxHadoopCopyFromLocal(paste("data/", x), paste0("/user/RevoShare/alizaidi/taxidata/", x))
})
?rxHadoopCopyFromLocal
taxi_files <- list.files("data/")
lapply(taxi_files, function(x) {
rxHadoopCopyFromLocal(source = paste0("data/", x),
dest = paste0("/user/RevoShare/alizaidi/taxidata/", x))
})
myNameNode <- "default"
myPort <- 0
hdfsFS <- RxHdfsFileSystem(hostName = myNameNode,
port = myPort)
taxi_path <- file.path("/user/RevoShare/alizaidi",
"taxidata/")
taxi_dir <- RxTextData(taxi_path,
fileSystem = hdfsFS)
taxi_xdf <- RxXdfData(file.path("/user/RevoShare/alizaidi",
"taxidataXdf"),
fileSystem = hdfsFS)
# Create Spark Compute Context --------------------------------------------
spark_cc <- RxSpark(consoleOutput = TRUE,
nameNode = myNameNode,
port = myPort,
executorCores = 12,
executorMem = "10g",
executorOverheadMem = "5g",
persistentRun = TRUE,
extraSparkConfig = "--conf spark.speculation=true")
rxSetComputeContext(computeContext)
rxSetComputeContext(spark_cc)
taxi_dir
taxi_dir@file
rxGetInfo(taxi_dir)
rxGetInfo(taxi_dir, numRows = )
rxGetInfo(taxi_dir, numRows = 5)
system.time(rxImport(inData = taxi_dir,
outFile = taxi_xdf))
taxi_xdf
ls()
ls()
system.time(rxGetInfo(taxi_xdf, numRows = 5, getVarInfo = TRUE))
rxGetInfo(taxi_xdf, numRows = 5, getVarInfo = TRUE)
ls()
taxi_xdf %>% head
library(magrittr)
taxi_xdf %>% head
list.files()
reqd_pkgs <- c('dplyr', 'stringr', 'lubridate',
'rgeos', 'sp', 'maptools',
'ggmap', 'ggplot2', 'gridExt',
'ggrepel', 'tidyr', 'seriatiion')
lapply(reqd_pkgs, packageVersion)
system("sudo apt-get install libgeos libgeos-dev")
system("sudo apt-get update")
system("sudo apt-get install libgeos libgeos-dev")
system("sudo apt-get install libgeos libgeos-dev")
system("sudo apt-get install libgeos-dev")
system("sudo apt-get install libgeos-dev -y")
system("sudo apt-get install libgeos-dev -y")
getOption("repos")
r <- getOption("repos")
r[["CRAN"]] <- "https://mran.revolutionanalytics.com/snapshot/2016-10-25"
options(repos = r)
options(max.print = 1000, scipen = 999, width = 90)
library(RevoScaleR)
rxOptions(reportProgress = 1) # reduces the amount of output RevoScaleR produces
library(dplyr)
options(dplyr.print_max = 2000)
options(dplyr.width = Inf) # shows all columns of a tbl_df object
library(stringr)
library(lubridate)
library(rgeos) # spatial package
options(max.print = 1000, scipen = 999, width = 90)
library(RevoScaleR)
rxOptions(reportProgress = 1) # reduces the amount of output RevoScaleR produces
library(dplyr)
options(dplyr.print_max = 2000)
options(dplyr.width = Inf) # shows all columns of a tbl_df object
library(stringr)
library(lubridate)
# library(rgeos) # spatial package
library(sp) # spatial package
library(maptools) # spatial package
library(ggmap)
options(max.print = 1000, scipen = 999, width = 90)
library(RevoScaleR)
rxOptions(reportProgress = 1) # reduces the amount of output RevoScaleR produces
library(dplyr)
options(dplyr.print_max = 2000)
options(dplyr.width = Inf) # shows all columns of a tbl_df object
library(stringr)
library(lubridate)
# library(rgeos) # spatial package
library(sp) # spatial package
library(maptools) # spatial package
library(ggmap)
library(ggplot2)
library(gridExtra) # for putting plots side by side
library(ggrepel) # avoid text overlap in plots
library(tidyr)
library(seriation) # package for reordering a distance matrix
ls()
taxi_xdf
taxi_xdf %>% rxGetInfo
taxi_xdf %>% rxGetInfo(getVarInfo = TRUE)
rxGetInfo(taxi_xdf, getVarInfo = TRUE, numRows = 5)
rxGetInfo(taxi_xdf, getVarInfo = TRUE, numRows = 5)
rxDataStep(taxi_xdf, taxi_xdf,
transforms = list(tip_percent = ifelse(fare_amount > 0 & tip_amount < fare_amount,
round(tip_amount  / fare_amount, 0),
NA)),
overwrite = TRUE)
ls()
taxi_dir
taxi_tip <- RxXdfData("/user/RevoShare/alizaidi/taxiXdftip")
taxi_tip <- RxXdfData("/user/RevoShare/alizaidi/taxiXdftip",
fileSystem = hdfsFS)
rxDataStep(taxi_xdf, taxi_tip,
transforms = list(tip_percent = ifelse(fare_amount > 0 & tip_amount < fare_amount,
round(tip_amount  / fare_amount, 0),
NA)))
nrow(taxi_xdf)
ls()
rxGetInfo(taxi_xdf)
taxi_tip
rxGetInfo(taxi_tip)
rxGetComputeContext()
ls()
myNameNode <- "default"
myPort <- 0
hdfsFS <- RxHdfsFileSystem(hostName = myNameNode,
port = myPort)
taxi_path <- file.path("/user/RevoShare/alizaidi",
"taxidata/")
taxi_dir <- RxTextData(taxi_path,
fileSystem = hdfsFS)
taxi_xdf <- RxXdfData(file.path("/user/RevoShare/alizaidi",
"taxidataXdf"),
fileSystem = hdfsFS)
# Create Spark Compute Context --------------------------------------------
spark_cc <- RxSpark(consoleOutput = TRUE,
nameNode = myNameNode,
port = myPort,
executorCores = 12,
executorMem = "10g",
executorOverheadMem = "5g",
persistentRun = TRUE,
extraSparkConfig = "--conf spark.speculation=true")
rxSetComputeContext(spark_cc)
taxi_tip <- RxXdfData("/user/RevoShare/alizaidi/taxitipXdf",
fileSystem = hdfsFS)
rxDataStep(taxi_xdf, taxi_tip,
transforms = list(tip_percent = ifelse(fare_amount > 0,
tip_amount/fare_amount,
NA)))
rxGetInfo(taxi_tip, numRows = 5)
system.time(
rxsum_xdf <- rxSummary( ~ fare_amount, taxi_xdf)
)
rxsum_xdf
rxSummary( ~ tip_percent, nyc_xdf)
rxSummary( ~ tip_percent, taxi_tip)
rxCrossTabs( ~ month:year, taxi_tip,
transforms = list(
year = as.integer(substr(tpep_pickup_datetime, 1, 4)),
month = as.integer(substr(tpep_pickup_datetime, 6, 7)),
year = factor(year, levels = 2014:2016),
month = factor(month, levels = 1:12)))
?rxOptions
rxOptions(reportProgress = 3) # reduces the amount of output RevoScaleR produces
rxCrossTabs( ~ month:year, taxi_tip,
transforms = list(
date = ymd_hms(tpep_pickup_datetime),
year = factor(year(date), levels = 2014:2016),
month = factor(month(date), levels = 1:12)),
transformPackages = "lubridate")
?rxExec
args(install.packages)
?install.packags
?install.packages
rxExec(install.packages, pkgs = c("lubridate"), repos = "https://mran.revolutionanalytics.com/snapshot/2016-10-25")
rxCrossTabs( ~ month:year, taxi_tip,
transforms = list(
date = ymd_hms(tpep_pickup_datetime),
year = factor(year(date), levels = 2014:2016),
month = factor(month(date), levels = 1:12)),
transformPackages = "lubridate")
rxExec(install.packages, "lubridate")
rxExec(getOption("repos"))
?getOption
rxExec(getOption, x = "repos")
?rxExec
rxExec(install.packages, pkgs = c("lubridate"), repos = "https://mran.revolutionanalytics.com/snapshot/2016-10-25", oncePerElem = TRUE)
rx_hadoopmr <- RxHadoopMR(consoleOutput = TRUE,
nameNode = myNameNode,
port = myPort,
hadoopSwitches = "-libjars /etc/hadoop/conf")
rxGetComputeContext()
rxSetComputeContext(rx_hadoopmr)
rxExec(packageVersion, pkg = "lubridate", oncePerElem = TRUE)
rxSetComputeContext(spark_cc)
rxCrossTabs( ~ month:year, taxi_tip,
transforms = list(
date = ymd_hms(tpep_pickup_datetime),
year = factor(year(date), levels = 2014:2016),
month = factor(month(date), levels = 1:12)),
transformPackages = "lubridate")
xforms <- function(data) { # transformation function for extracting some date and time features
require(lubridate)
weekday_labels <- c('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat')
cut_levels <- c(1, 5, 9, 12, 16, 18, 22)
hour_labels <- c('1AM-5AM', '5AM-9AM', '9AM-12PM', '12PM-4PM', '4PM-6PM', '6PM-10PM', '10PM-1AM')
pickup_datetime <- ymd_hms(data$tpep_pickup_datetime, tz = "UTC")
pickup_hour <- addNA(cut(hour(pickup_datetime), cut_levels))
pickup_dow <- factor(wday(pickup_datetime), levels = 1:7, labels = weekday_labels)
levels(pickup_hour) <- hour_labels
dropoff_datetime <- ymd_hms(data$tpep_dropoff_datetime, tz = "UTC")
dropoff_hour <- addNA(cut(hour(dropoff_datetime), cut_levels))
dropoff_dow <- factor(wday(dropoff_datetime), levels = 1:7, labels = weekday_labels)
levels(dropoff_hour) <- hour_labels
data$pickup_hour <- pickup_hour
data$pickup_dow <- pickup_dow
data$dropoff_hour <- dropoff_hour
data$dropoff_dow <- dropoff_dow
data$trip_duration <- as.integer(as.duration(dropoff_datetime - pickup_datetime))
data
}
taxi_date <- RxXdfData("/user/RevoShare/alizaidi/taxidates",
fileSystem = hdfsFS)
rxDataStep(taxi_tip, taxi_date,
transformFunc = xforms,
transformPackages = "lubridate")
head(taxi_tip)
x <- head(taxi_tip)
x
rxSetComputeContext("local")
rxDataStep(inData = x, outFile = NULL, transformFunc = xforms, transformPackages = 'lubridate')
rxSetComputeContext(spark_cc)
rxDataStep(inData = x,
outFile = NULL,
transformFunc = xforms,
transformPackages = "lubridate")
rxSetComputeContext(spark_cc)
rxDataStep(inData = taxi_tip,
outFile = taxi_date,
transformFunc = xforms,
transformPackages = "lubridate")
rxSetComputeContext("local")
rxDataStep(inData = x,
outFile = NULL,
transformFunc = xforms,
transformPackages = "lubridate")
rxDataStep(inData = x,
outFile = NULL,
transformFunc = xforms,
transformPackages = "lubridate")
rxDataStep(inData = x,
outFile = NULL,
transformFunc = xforms,
transformPackages = "lubridate")
x <- head(taxi_tip, n = 100)
dim(x)
x
rxDataStep(inData = x,
outFile = NULL,
transformFunc = xforms,
transformPackages = "lubridate")
rxSetComputeContext(spark_cc)
rxDataStep(inData = taxi_tip,
outFile = taxi_date,
transformFunc = xforms,
transformPackages = "lubridate")
x
head(x)
rxGetInfo(taxi_tip, getVarInfo = TRUE)
ls()
taxi_date <- RxXdfData("/user/RevoShare/alizaidi/taxidates",
fileSystem = hdfsFS)
rxDataStep(inData = taxi_tip,
outFile = taxi_date,
transformFunc = xforms,
transformPackages = "lubridate")
rxExec(packageVersion, pkg = "lubridate", timesToRun = 30)
rxSummary(~ tip_amount + total_amount, data = taxi_tip)
rm(list = ls())
q()
